{"javascript":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root,pos = 0,result = []) {\n  if (root == null) return ''\n  var q = []\n  var res = ''\n  q.push(root)\n  while(q.length != 0){\n    var node = q.shift()\n    if(node == null) {\n      res += 'n '\n      continue;\n    }\n    res += node.val+' '\n    q.push(node.left)\n    q.push(node.right)\n  } \n  return res\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n  if(data == '') return null\n  var q = []\n  var value = data.split(' ')\n  debugger\n  var root = new TreeNode(parseInt(value[0]))\n  q.push(root)\n  for(var i = 1;i < value.length - 1;i++) {\n    var parent = q.shift()\n    if(value[i] != 'n') {\n      var left = new TreeNode(parseInt(value[i]))\n      parent.left = left\n      q.push(left)\n    }\n    if(value[++i] != 'n') {\n      var right = new TreeNode(parseInt(value[i]))\n      parent.right = right\n      q.push(right)\n    }\n  }\n  return root\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"}