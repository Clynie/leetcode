{"javascript":"/**\r\n * Definition for binary tree\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @constructor\r\n * @param {TreeNode} root - root of the binary search tree\r\n */\r\nvar BSTIterator = function(root) {\r\n  var nodeList = []\r\n  inorderTraversal(nodeList,root)\r\n\r\n  this.nodeList = nodeList\r\n  this.index = -1 \r\n};\r\n\r\n\r\n/**\r\n * @this BSTIterator\r\n * @returns {boolean} - whether we have a next smallest number\r\n */\r\nBSTIterator.prototype.hasNext = function() {\r\n  return this.nodeList[this.index+1]\r\n};\r\n\r\n/**\r\n * @this BSTIterator\r\n * @returns {number} - the next smallest number\r\n */\r\nBSTIterator.prototype.next = function() {\r\n  return this.nodeList[++ this.index].val\r\n};\r\n\r\nfunction inorderTraversal(nodeList,root) {\r\n  if(root == null){\r\n    return\r\n  }\r\n  if(root.left != null){\r\n    inorderTraversal(nodeList,root.left)\r\n  }\r\n  nodeList.push(root)\r\n  if(root.right != null) {\r\n    inorderTraversal(nodeList,root.right)\r\n  }\r\n}\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * var i = new BSTIterator(root), a = [];\r\n * while (i.hasNext()) a.push(i.next());\r\n*/"}