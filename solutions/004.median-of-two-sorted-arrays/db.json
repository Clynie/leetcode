{"javascript":"/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n\tvar m = nums1.length\n\tvar n = nums2.length\n\n\tif ((m + n) % 2 == 0) {\n\t\treturn (getMedian(nums1, m, nums2, n, (m + n) / 2) + getMedian(nums1, m, nums2, n, (m + n) / 2 + 1)) / 2.0\n\t} else {\n\t\treturn getMedian(nums1, m, nums2, n, (m + n + 1) / 2)\n\t}\n\n\tfunction getMedian(a, m, b, n, k) {\n\t\tdebugger\n\t\tif (m > n) {\n\t\t\treturn getMedian(b, n, a, m, k)\n\t\t}\n\t\tif (m == 0) {\n\t\t\treturn b[k - 1]\n\t\t}\n\t\tif (k === 1) {\n\t\t\treturn Math.min(a[0], b[0])\n\t\t}\n\n\t\tvar pa = Math.min(Math.floor(k / 2), m)\n\t\tvar pb = k - pa\n\n\t\tif (a[pa - 1] < b[pb - 1]) {\n\t\t\treturn getMedian(a.slice(pa), m - pa, b, n, k - pa)\n\t\t} else if (a[pa - 1] > b[pb - 1]) {\n\t\t\treturn getMedian(a, m, b.slice(pb), n - pb, k - pb)\n\t\t} else {\n\t\t\treturn a[pa - 1]\n\t\t}\n\t}\n};"}