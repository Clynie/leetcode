{"javascript":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n\tvar n = board.length\n\tif(n == 0) return\n\tvar m = board[0].length\n\t\n\tfor(var i = 0; i < n;i++) {\n\t\tdfs(board,i,0,n,m)\n\t\tif(m>1){\n\t\t\tdfs(board,i,m-1,n,m)\n\t\t}\n\t}\n\tfor(var j = 0;j < m; j++) {\n\t\tdfs(board,0,j,n,m)\n\t\tif(n > 1){\n\t\t\tdfs(board,n-1,j,n,m)\n\t\t}\n\t}\n\tfor(var i = 0;i<n;i++) {\n\t\tfor(var j = 0; j < m;j++) {\n\t\t\tif(board[i][j] == 'O') board[i][j] = 'X'\n\t\t}\n\t}\n\tfor(var i = 0;i<n;i++) {\n\t\tfor(var j = 0; j < m;j++) {\n\t\t\tif(board[i][j] == '1') board[i][j] = 'O'\n\t\t}\n\t}\n\t\n}\n\nfunction dfs(board,i,j,n,m) {\n\tdebugger\n\tif(board[i][j] == 'O') {\n\t\tboard[i][j] = '1'\n\t\tif(i > 1)  dfs(board,i-1,j,n,m)\n\t\tif(j > 1)  dfs(board,i,j-1,n,m)\n\t\tif(i+1 < n)  dfs(board,i+1,j,n,m)\n\t\tif(j+1 < m)  dfs(board,i,j+1,n,m)\n\t}\n}"}